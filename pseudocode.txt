app.js will setup the default state of the todo-list application. and maybe do more.. dunno yet

Projects.js will create, read, update, and delete project objects. These objects will be instantiated using a Projects class. 

Tasks.js will create, read, update, and delete task objects. These objects will be instantiated using a Tasks class. Inside of the class will be a constructor. The constructor will take title, description, dueDate, and priority as input. dueDate will need to go through a formatting process so that it can be handled consistently. Priority will be either 0, 1, or 2 which indicate low, medium, or high. I want each task to have a 'completed' property that is initialized as false and can be toggled once the UI is built. 

A module called screenController.js will take user input and deliver it to the proper module, and then once the results are processed it will render the output.

// important object role stereotypes below

Information holder – an object designed to know certain information and provide that information to other objects.
Structurer – an object that maintains relationships between objects and information about those relationships.
Service provider – an object that performs specific work and offers services to others on demand.
Controller – an object designed to make decisions and control a complex task.
Coordinator – an object that doesn’t make many decisions but, in a rote or mechanical way, delegates work to other objects.
Interfacer – an object that transforms information or requests between distinct parts of a system.

