    To start, I will definitely need a way to create a todo-item. I can create a TodoItem class in order to accomplish this. What will be inside the class exactly? Well, the first thing I am going to need is a constructor. The constructor will need to gather information from the user in order to create a todo item. The required information will be title, description, dueDate, and priority. dueDate will need to go through a formatting process so that it can be handled consistently. Priority will be either 0, 1, or 2 which indicate low, medium, or high. I want each todoItem to have a 'completed' property that is initialized as false and can be toggled once the UI is built. 

I will need a way to get each items details so that the screenController can display them on request, a deleteItem option to remove it from the array it is stored in (a todoItems array?), and an edit details method to change any value within the item. 

A module called app.js can exist as a main point of contact to manage the relationships between the project and task modules. Each of these modules are capable of creating, reading, updating, and deleting either projects or tasks. A module called screenController.js will take user input and deliver it to the proper module, and then once the results are processed it will render the output.

// important object role stereotypes below

Information holder – an object designed to know certain information and provide that information to other objects.
Structurer – an object that maintains relationships between objects and information about those relationships.
Service provider – an object that performs specific work and offers services to others on demand.
Controller – an object designed to make decisions and control a complex task.
Coordinator – an object that doesn’t make many decisions but, in a rote or mechanical way, delegates work to other objects.
Interfacer – an object that transforms information or requests between distinct parts of a system.

