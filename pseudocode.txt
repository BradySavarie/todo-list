app.js will setup the default state of the todo-list application.

The projects.js and tasks.js modules will create, read, update, and delete objects. 

A module called handlers.js will retrieve, validate, and export user input

a module called UI.js will update the DOM and render output

Next steps:

Onload:
    - Default project is created
    - Default task is inserted into default project
    - Default styling is rendered

** Use a switch statement to check for data attributes in handlers.js **

Click Events:

    enterNewProjectBtn
        - newProjectModal is displayed and contains a form to retrieve input

        createNewProjectBtn
            - createProject is called with user info as input
            - new empty project is displayed in main container and is set to the current selection

    readProjectBtn
        - readProjectModal is displayed and contains a form that is pre-filled with current project information and accepts edits
        
        updateProjectBtn
            - Change information within currently selected project to the users input
            - Render updated project to main container

    deleteProjectBtn
        - Currently selected project is removed from array
        - if projectsList.length === 0 display no projects message, else set the first project in array to the current selection and display contents

    enterNewTaskBtn
        - newTaskModal is displayed and contains a form to retrieve input

        createNewTaskBtn
            - createTask is called with user info as input and the projectIndex set to the currently selected project
            - new task is displayed in main container

    
    Okay! So now I need to:
        - Create the project and task modals that open on click. I can style them later
        - Attach listeners to the modal submit buttons
        - Write function logic that responds to the submit buttons
        - Important place to start with logic could be just the create functions
        - Once items can be created I will focus on deleting them
        - Once that is done I can add the update function in
        - At this point i'll need to figure out project switching functionality to display only the active project with its contents
        - I can then include "mark as complete" functionality to the tasks
        - All the main logic should be ready by this point to start thinking about styling
        - Start with only the default load up, hide everything else
        - style the modals afterwards
        - now style the page when contents have been added in

    
    

    

