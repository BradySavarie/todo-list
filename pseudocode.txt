app.js will setup the default state of the todo-list application.

The projects.js and tasks.js modules will create, read, update, and delete objects. 

A module called handlers.js will retrieve, validate, and export user input

a module called UI.js will update the DOM and render output

Next steps:

Onload:
    - Default project is created
    - Default task is inserted into default project
    - Default styling is rendered

** Use a switch statement to check for data attributes in handlers.js **

Click Events:

    enterNewProjectBtn
        - newProjectModal is displayed and contains a form to retrieve input

        createNewProjectBtn
            - createProject is called with user info as input
            - new empty project is displayed in main container and is set to the current selection

    readProjectBtn
        - readProjectModal is displayed and contains a form that is pre-filled with current project information and accepts edits
        
        updateProjectBtn
            - Change information within currently selected project to the users input
            - Render updated project to main container

    deleteProjectBtn
        - Currently selected project is removed from array
        - if projectsList.length === 0 display no projects message, else set the first project in array to the current selection and display contents

    enterNewTaskBtn
        - newTaskModal is displayed and contains a form to retrieve input

        createNewTaskBtn
            - createTask is called with user info as input and the projectIndex set to the currently selected project
            - new task is displayed in main container

    
    Okay! So now I need to:
        - At this point i'll need to figure out project switching functionality to display only the active project with its contents. This way I can ensure tasks are appended to the correct project when created
        - Write function logic that responds to the submit buttons
        - Important place to start with logic could be just the create functions
        - Once items can be created I will focus on deleting them
        - Once that is done I can add the update function in
        - I can then include "mark as complete" functionality to the tasks
        - All the main logic should be ready by this point to start thinking about styling
        - Start with only the default load up, hide everything else
        - style the modals afterwards
        - now style the page when contents have been added in

    Active Project Logic:
        Goal: When a new project is created or an existing project is clicked on it is set to the active project and displayed

    - an activeProject variable will contain a reference to a recently created or clicked on project. It will be used to identify which project to display and attach new tasks to. New tasks will be added by saying activeProject.tasks.push()
    - setActiveProject will be triggered when createNewProject is invoked or an existing task is clicked on.
    - When a project is created a card with the information will be displayed. Each project card will be given a data attribute that corresponds to the index of the projectsList array that its project object resides at. When a project is clicked the data attribute value gets plugged into the index number of the projectsList array and the resulting object is set as the activeProject variable. 

    
    

    

